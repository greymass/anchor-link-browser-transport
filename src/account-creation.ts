import {
    APIError,
    Base64u,
    Bytes,
    isInstanceOf,
    Link,
    LinkChannelSession,
    LinkSession,
    LinkStorage,
    LinkTransport,
    SessionError,
    SigningRequest,
} from 'anchor-link'

import styleText from './styles'
import generateQr from './qrcode'

import {fuel, compareVersion as fuelVersion} from './fuel'

const AbortPrepare = Symbol()
const SkipFee = Symbol()
const SkipToManual = Symbol()

export interface BrowserTransportOptions {
    /** CSS class prefix, defaults to `anchor-link` */
    classPrefix?: string
    /** Whether to inject CSS styles in the page header, defaults to true. */
    injectStyles?: boolean
    /** Whether to display request success and error messages, defaults to true */
    requestStatus?: boolean
    /** Local storage prefix, defaults to `anchor-link`. */
    storagePrefix?: string
    /**
     * Whether to use Greymass Fuel for low resource accounts, defaults to false.
     * Note that this service is not available on all networks.
     * Visit https://greymass.com/en/fuel for more information.
     */
    disableGreymassFuel?: boolean
    /**
     * The referring account to pass along to the Greymass Fuel API endpoint.
     * Specifying an account name will indicate to the API which account is eligible
     * to potentially receive a share of the fees generated by their application.
     */
    fuelReferrer?: string
    /**
     * Override of the supported resource provider chains.
     */
    supportedChains?: Record<string, string>
    /**
     * Set to false to not use !important styles, defaults to true.
     */
    importantStyles?: boolean
}

const defaultSupportedChains = {
    aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906: 'https://eos.greymass.com',
    '2a02a0053e5a8cf73a56ba0fda11e4d92e0238a4a2aa74fccf46d5a910746840':
        'https://jungle3.greymass.com',
    '4667b205c6838ef70ff7988f6e8257e8be0e1284a2f59699054a018f743b1d11':
        'https://telos.greymass.com',
    '1064487b3cd1a897ce03ae5b6a865651747e2e152090f99c1d19d44e01aea5a4': 'https://wax.greymass.com',
}

interface DialogArgs {
    title: string | HTMLElement
    subtitle: string | HTMLElement
    type?: string
    content?: HTMLElement
    action?: {text: string; callback: () => void}
    footnote?: string | HTMLElement
}

export default class AccountCreation {
    /** Package version. */
    static version = '__ver' // replaced by build script

    constructor(public readonly options: BrowserTransportOptions = {}) {
        this.classPrefix = options.classPrefix || 'anchor-link-create'
        this.injectStyles = !(options.injectStyles === false)
        this.importantStyles = !(options.importantStyles === false)
        this.showingManual = false
    }

    private classPrefix: string
    private injectStyles: boolean
    private importantStyles: boolean
    private containerEl!: HTMLElement
    private accountCreationEl!: HTMLElement
    private styleEl?: HTMLStyleElement
    private showingManual: boolean

    showDialog() {
        this.setupElements()

        const logoEl = this.createEl({class: 'logo'})

        const iframeSrc = ``

        const iframeElement = this.createEl({ class: 'iframe-container'. tag: 'iframe', src: iframeSrc })

        emptyElement(this.accountCreationEl)
        this.accountCreationEl.appendChild(logoEl)
        this.accountCreationEl.appendChild(iframeElement)

        this.show()
    }

    closeModal() {
        this.hide()
    }

    private setupElements() {
        this.showingManual = false
        if (this.injectStyles && !this.styleEl) {
            this.styleEl = document.createElement('style')
            this.styleEl.type = 'text/css'
            let css = styleText.replace(/%prefix%/g, this.classPrefix)
            if (this.importantStyles) {
                css = css
                    .split('\n')
                    .map((line) => line.replace(/;$/i, ' !important;'))
                    .join('\n')
            }
            this.styleEl.appendChild(document.createTextNode(css))
            document.head.appendChild(this.styleEl)
        }
        if (!this.containerEl) {
            this.containerEl = this.createEl()
            this.containerEl.className = this.classPrefix
            this.containerEl.onclick = (event) => {
                if (event.target === this.containerEl) {
                    event.stopPropagation()
                    this.closeModal()
                }
            }
            document.body.appendChild(this.containerEl)
        }
        if (!this.accountCreationEl) {
            const wrapper = this.createEl({class: 'inner'})
            const closeButton = this.createEl({class: 'close'})
            closeButton.onclick = (event) => {
                event.stopPropagation()
                this.closeModal()
            }
            this.accountCreationEl = this.createEl({class: 'account-creation'})
            wrapper.appendChild(this.accountCreationEl)
            wrapper.appendChild(closeButton)
            const version = this.createEl({
                class: 'version',
                text: `${BrowserTransport.version} (${Link.version})`,
            })
            version.onclick = (event) => {
                event.stopPropagation()
                window.open('https://github.com/greymass/anchor-link', '_blank')
            }
            wrapper.appendChild(version)
            this.containerEl.appendChild(wrapper)
        }
    }

    private createEl(attrs?: {[key: string]: any}): HTMLElement {
        const el = document.createElement(attrs.tag || 'div')

        Object.keys(attrs).forEach(attrKey => {
            if (attrKey === 'tag') {
                return;
            }

            el.setAttribute(attrKey, attrs[attrKey])
        });

        return el
    }

    private hide() {
        if (this.containerEl) {
            this.containerEl.classList.remove(`${this.classPrefix}-active`)
        }
    }

    private show() {
        if (this.containerEl) {
            this.containerEl.classList.add(`${this.classPrefix}-active`)
        }
    }
}

function emptyElement(el: HTMLElement) {
    while (el.firstChild) {
        el.removeChild(el.firstChild)
    }
}
